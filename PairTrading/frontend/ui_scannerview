from PairTrading.frontend.charting import DashChart
from PairTrading.backend.data_wrangler import DataWrangler
from PairTrading.backend.scanner import Scanner
from PairTrading.frontend.data_utils import DataUtils
from PairTrading.frontend.pair import Pair

from dash import Dash, html, dcc, Input, Output
import dash_bootstrap_components as dbc

class ScannerView:
    def __init__(self, market_data) -> None:
        self.callback_app = None
        self.market_data = market_data
        self.pairs_df = None
        self.scanner = Scanner()
        self.scanner.min_price = 2
        self.scanner.max_price = 50
        self.scanner.min_vol = 1000000
        self.update_pairs()

        #Preload chart objects
        self.compare_charts = []
        for i in range(400):
            self.comparechart = DashChart(f"tempcompare{i}", "compare")
            self.comparechart.set_callback_app(app)
            self.compare_charts.append(self.comparechart)

        self.sector_dropdown = [{"label": "All", "value": 1 }]
        self.industry_dropdown = self.sector_dropdown

        #Get all industries
        for i, s in enumerate(self.pairs_df.industry_title.sort_values().unique()):
            self.industry_dropdown.append({"label": s, "value": i+2})

    def set_callback_app(self, app):
        self.callback_app = app
        for c in self.compare_charts:
            c.set_callback_app(app)

        @app.callback(
            Output("page-content", "children"),
            [
                #Input("pagination", "active_page"),
                Input("minprice", "value"),
                Input("maxprice", "value"),
                Input("industry-select", "value")
            ],
        )
        def apply_filter_callback(minprice, maxprice, industry):
            if minprice and maxprice and industry:
                #print(sector_dropdown[int(industry)-1]["label"])
                return self.filter_pairs(minprice, maxprice, self.industry_dropdown[int(industry)-1]["label"])

    def update_pairs(self):
        self.pairs_df = self.scanner.get_pairs()

    def get_layout(self):
        scanner_settings = html.Div([
            dbc.Card([       
                dbc.CardHeader(html.H6("Scanner Filter", className="card-title")),
                dbc.CardBody([
                    dbc.InputGroup([dbc.InputGroupText("Min Price"), dbc.Input(id="minprice", type="number", value=2)]),
                    dbc.InputGroup([dbc.InputGroupText("Max Price"), dbc.Input(id="maxprice", type="number", value=10)]),
                    #dbc.InputGroup([dbc.InputGroupText("Min Volume"), dbc.Input(placeholder="Min Volume")]),
                    #dbc.InputGroup([dbc.InputGroupText("Max Volume"), dbc.Input(placeholder="Max Volume")]),
                    dbc.InputGroup([dbc.InputGroupText("Sector"), dbc.Select(id="industry-select", options = self.sector_dropdown, value="All")])
                ])
            ])
        ])

        return [scanner_settings, html.Div(id="result-content"), html.Div(id="page-content")]

    def filter_pairs(self, industry):
        print("Filter Pairs")

        chart_counter = 0
        layout_elements = []

        filtered_pairs_df = self.pairs_df[(self.pairs_df.ratio <= 0.1) & (self.pairs_df.industry_title == industry)].reset_index(drop=True).sort_values(by=("ratio"), ascending=False)
        
        i = 0
        max_tickers = 50
        for index, row in filtered_pairs_df.iterrows():
            ticker_a = row.A
            ticker_b = row.B
            ratio = row.ratio

            print(ticker_a, ticker_b, ratio)

            tickera_df = df[df.ticker == ticker_a]
            tickerb_df = df[df.ticker == ticker_b]

            if tickera_df.empty or ticker_a.find(".") >= 0 or ticker_b.find(".") >=0:
                continue

            i += 1
            if i > max_tickers:
                break
        
            chart = self.compare_charts[chart_counter]
            chart.chartType = "compare"
            chart.label = f"{ticker_a} - {ticker_b} - {ratio}"
            chart.data = tickera_df
            chart.compareData = tickerb_df
            chart_counter += 1

            ChartCard = [
                dbc.CardBody([
                    dbc.Row([
                        dbc.Col(chart.get_layout(),width=6),
                    ])
                ])                
            ]

            chartCard = dbc.Card(
                ChartCard
            )  
            
            layout_elements.append(chartCard)

        return layout_elements

if __name__ == '__main__':
    print("ui_scannerview")

    app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

    dw = DataWrangler()
    df = dw._DataWrangler__polygon_db.get_table('market_data')
    scanner_view = ScannerView(market_data=df)

    app.layout = html.Div(
        scanner_view.get_layout()
    )

    app.run_server(debug=True)